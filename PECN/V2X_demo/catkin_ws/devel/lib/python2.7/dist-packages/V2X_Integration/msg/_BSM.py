# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from V2X_Integration/BSM.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BSM(genpy.Message):
  _md5sum = "e6940b8bdce7382d047211cc39f10e12"
  _type = "V2X_Integration/BSM"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string id
float32 sec_mark
int16 message_count
float32 latitude
float32 longtitude
float32 elevation
float32 pos_accuracy_semi_major
float32 pos_accuracy_semi_minor
float32 pos_accuracy_orientation
float32 lateral_acceleration
float32 longitudinal_acceleration
float32 vert_acceleration
float32 yaw_acceleration
uint8 transmission_state
uint8 response_type
uint8 light_use
uint8 siren_use
uint8 events
uint8 lights
uint8 confidence_position
uint8 confidence_elevation
uint8 vehicle_class
uint8 vehicle_fuel_type
float32 heading
float32 speed
int16 angle
float32 vehicle_width
float32 vehicle_lenth
float32 vehicle_height
uint8 brake_padel
uint8 wheel_brakes
uint8 traction
uint8 abs
uint8 scs
uint8 brake_boost
uint8 aux_brakes


























"""
  __slots__ = ['id','sec_mark','message_count','latitude','longtitude','elevation','pos_accuracy_semi_major','pos_accuracy_semi_minor','pos_accuracy_orientation','lateral_acceleration','longitudinal_acceleration','vert_acceleration','yaw_acceleration','transmission_state','response_type','light_use','siren_use','events','lights','confidence_position','confidence_elevation','vehicle_class','vehicle_fuel_type','heading','speed','angle','vehicle_width','vehicle_lenth','vehicle_height','brake_padel','wheel_brakes','traction','abs','scs','brake_boost','aux_brakes']
  _slot_types = ['string','float32','int16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32','float32','int16','float32','float32','float32','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,sec_mark,message_count,latitude,longtitude,elevation,pos_accuracy_semi_major,pos_accuracy_semi_minor,pos_accuracy_orientation,lateral_acceleration,longitudinal_acceleration,vert_acceleration,yaw_acceleration,transmission_state,response_type,light_use,siren_use,events,lights,confidence_position,confidence_elevation,vehicle_class,vehicle_fuel_type,heading,speed,angle,vehicle_width,vehicle_lenth,vehicle_height,brake_padel,wheel_brakes,traction,abs,scs,brake_boost,aux_brakes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BSM, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = ''
      if self.sec_mark is None:
        self.sec_mark = 0.
      if self.message_count is None:
        self.message_count = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longtitude is None:
        self.longtitude = 0.
      if self.elevation is None:
        self.elevation = 0.
      if self.pos_accuracy_semi_major is None:
        self.pos_accuracy_semi_major = 0.
      if self.pos_accuracy_semi_minor is None:
        self.pos_accuracy_semi_minor = 0.
      if self.pos_accuracy_orientation is None:
        self.pos_accuracy_orientation = 0.
      if self.lateral_acceleration is None:
        self.lateral_acceleration = 0.
      if self.longitudinal_acceleration is None:
        self.longitudinal_acceleration = 0.
      if self.vert_acceleration is None:
        self.vert_acceleration = 0.
      if self.yaw_acceleration is None:
        self.yaw_acceleration = 0.
      if self.transmission_state is None:
        self.transmission_state = 0
      if self.response_type is None:
        self.response_type = 0
      if self.light_use is None:
        self.light_use = 0
      if self.siren_use is None:
        self.siren_use = 0
      if self.events is None:
        self.events = 0
      if self.lights is None:
        self.lights = 0
      if self.confidence_position is None:
        self.confidence_position = 0
      if self.confidence_elevation is None:
        self.confidence_elevation = 0
      if self.vehicle_class is None:
        self.vehicle_class = 0
      if self.vehicle_fuel_type is None:
        self.vehicle_fuel_type = 0
      if self.heading is None:
        self.heading = 0.
      if self.speed is None:
        self.speed = 0.
      if self.angle is None:
        self.angle = 0
      if self.vehicle_width is None:
        self.vehicle_width = 0.
      if self.vehicle_lenth is None:
        self.vehicle_lenth = 0.
      if self.vehicle_height is None:
        self.vehicle_height = 0.
      if self.brake_padel is None:
        self.brake_padel = 0
      if self.wheel_brakes is None:
        self.wheel_brakes = 0
      if self.traction is None:
        self.traction = 0
      if self.abs is None:
        self.abs = 0
      if self.scs is None:
        self.scs = 0
      if self.brake_boost is None:
        self.brake_boost = 0
      if self.aux_brakes is None:
        self.aux_brakes = 0
    else:
      self.id = ''
      self.sec_mark = 0.
      self.message_count = 0
      self.latitude = 0.
      self.longtitude = 0.
      self.elevation = 0.
      self.pos_accuracy_semi_major = 0.
      self.pos_accuracy_semi_minor = 0.
      self.pos_accuracy_orientation = 0.
      self.lateral_acceleration = 0.
      self.longitudinal_acceleration = 0.
      self.vert_acceleration = 0.
      self.yaw_acceleration = 0.
      self.transmission_state = 0
      self.response_type = 0
      self.light_use = 0
      self.siren_use = 0
      self.events = 0
      self.lights = 0
      self.confidence_position = 0
      self.confidence_elevation = 0
      self.vehicle_class = 0
      self.vehicle_fuel_type = 0
      self.heading = 0.
      self.speed = 0.
      self.angle = 0
      self.vehicle_width = 0.
      self.vehicle_lenth = 0.
      self.vehicle_height = 0.
      self.brake_padel = 0
      self.wheel_brakes = 0
      self.traction = 0
      self.abs = 0
      self.scs = 0
      self.brake_boost = 0
      self.aux_brakes = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fh10f10B2fh3f7B().pack(_x.sec_mark, _x.message_count, _x.latitude, _x.longtitude, _x.elevation, _x.pos_accuracy_semi_major, _x.pos_accuracy_semi_minor, _x.pos_accuracy_orientation, _x.lateral_acceleration, _x.longitudinal_acceleration, _x.vert_acceleration, _x.yaw_acceleration, _x.transmission_state, _x.response_type, _x.light_use, _x.siren_use, _x.events, _x.lights, _x.confidence_position, _x.confidence_elevation, _x.vehicle_class, _x.vehicle_fuel_type, _x.heading, _x.speed, _x.angle, _x.vehicle_width, _x.vehicle_lenth, _x.vehicle_height, _x.brake_padel, _x.wheel_brakes, _x.traction, _x.abs, _x.scs, _x.brake_boost, _x.aux_brakes))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.id = str[start:end]
      _x = self
      start = end
      end += 85
      (_x.sec_mark, _x.message_count, _x.latitude, _x.longtitude, _x.elevation, _x.pos_accuracy_semi_major, _x.pos_accuracy_semi_minor, _x.pos_accuracy_orientation, _x.lateral_acceleration, _x.longitudinal_acceleration, _x.vert_acceleration, _x.yaw_acceleration, _x.transmission_state, _x.response_type, _x.light_use, _x.siren_use, _x.events, _x.lights, _x.confidence_position, _x.confidence_elevation, _x.vehicle_class, _x.vehicle_fuel_type, _x.heading, _x.speed, _x.angle, _x.vehicle_width, _x.vehicle_lenth, _x.vehicle_height, _x.brake_padel, _x.wheel_brakes, _x.traction, _x.abs, _x.scs, _x.brake_boost, _x.aux_brakes,) = _get_struct_fh10f10B2fh3f7B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fh10f10B2fh3f7B().pack(_x.sec_mark, _x.message_count, _x.latitude, _x.longtitude, _x.elevation, _x.pos_accuracy_semi_major, _x.pos_accuracy_semi_minor, _x.pos_accuracy_orientation, _x.lateral_acceleration, _x.longitudinal_acceleration, _x.vert_acceleration, _x.yaw_acceleration, _x.transmission_state, _x.response_type, _x.light_use, _x.siren_use, _x.events, _x.lights, _x.confidence_position, _x.confidence_elevation, _x.vehicle_class, _x.vehicle_fuel_type, _x.heading, _x.speed, _x.angle, _x.vehicle_width, _x.vehicle_lenth, _x.vehicle_height, _x.brake_padel, _x.wheel_brakes, _x.traction, _x.abs, _x.scs, _x.brake_boost, _x.aux_brakes))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.id = str[start:end]
      _x = self
      start = end
      end += 85
      (_x.sec_mark, _x.message_count, _x.latitude, _x.longtitude, _x.elevation, _x.pos_accuracy_semi_major, _x.pos_accuracy_semi_minor, _x.pos_accuracy_orientation, _x.lateral_acceleration, _x.longitudinal_acceleration, _x.vert_acceleration, _x.yaw_acceleration, _x.transmission_state, _x.response_type, _x.light_use, _x.siren_use, _x.events, _x.lights, _x.confidence_position, _x.confidence_elevation, _x.vehicle_class, _x.vehicle_fuel_type, _x.heading, _x.speed, _x.angle, _x.vehicle_width, _x.vehicle_lenth, _x.vehicle_height, _x.brake_padel, _x.wheel_brakes, _x.traction, _x.abs, _x.scs, _x.brake_boost, _x.aux_brakes,) = _get_struct_fh10f10B2fh3f7B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fh10f10B2fh3f7B = None
def _get_struct_fh10f10B2fh3f7B():
    global _struct_fh10f10B2fh3f7B
    if _struct_fh10f10B2fh3f7B is None:
        _struct_fh10f10B2fh3f7B = struct.Struct("<fh10f10B2fh3f7B")
    return _struct_fh10f10B2fh3f7B

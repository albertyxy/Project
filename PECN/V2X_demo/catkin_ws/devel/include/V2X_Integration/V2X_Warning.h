// Generated by gencpp from file V2X_Integration/V2X_Warning.msg
// DO NOT EDIT!


#ifndef V2X_INTEGRATION_MESSAGE_V2X_WARNING_H
#define V2X_INTEGRATION_MESSAGE_V2X_WARNING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace V2X_Integration
{
template <class ContainerAllocator>
struct V2X_Warning_
{
  typedef V2X_Warning_<ContainerAllocator> Type;

  V2X_Warning_()
    : warning_level(0)  {
    }
  V2X_Warning_(const ContainerAllocator& _alloc)
    : warning_level(0)  {
  (void)_alloc;
    }



   typedef uint8_t _warning_level_type;
  _warning_level_type warning_level;





  typedef boost::shared_ptr< ::V2X_Integration::V2X_Warning_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::V2X_Integration::V2X_Warning_<ContainerAllocator> const> ConstPtr;

}; // struct V2X_Warning_

typedef ::V2X_Integration::V2X_Warning_<std::allocator<void> > V2X_Warning;

typedef boost::shared_ptr< ::V2X_Integration::V2X_Warning > V2X_WarningPtr;
typedef boost::shared_ptr< ::V2X_Integration::V2X_Warning const> V2X_WarningConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::V2X_Integration::V2X_Warning_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::V2X_Integration::V2X_Warning_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::V2X_Integration::V2X_Warning_<ContainerAllocator1> & lhs, const ::V2X_Integration::V2X_Warning_<ContainerAllocator2> & rhs)
{
  return lhs.warning_level == rhs.warning_level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::V2X_Integration::V2X_Warning_<ContainerAllocator1> & lhs, const ::V2X_Integration::V2X_Warning_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace V2X_Integration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::V2X_Integration::V2X_Warning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::V2X_Integration::V2X_Warning_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::V2X_Integration::V2X_Warning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::V2X_Integration::V2X_Warning_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::V2X_Integration::V2X_Warning_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::V2X_Integration::V2X_Warning_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::V2X_Integration::V2X_Warning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "140cc051af28c9742e4f2dcebd133a9b";
  }

  static const char* value(const ::V2X_Integration::V2X_Warning_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x140cc051af28c974ULL;
  static const uint64_t static_value2 = 0x2e4f2dcebd133a9bULL;
};

template<class ContainerAllocator>
struct DataType< ::V2X_Integration::V2X_Warning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "V2X_Integration/V2X_Warning";
  }

  static const char* value(const ::V2X_Integration::V2X_Warning_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::V2X_Integration::V2X_Warning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 warning_level\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::V2X_Integration::V2X_Warning_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::V2X_Integration::V2X_Warning_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.warning_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct V2X_Warning_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::V2X_Integration::V2X_Warning_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::V2X_Integration::V2X_Warning_<ContainerAllocator>& v)
  {
    s << indent << "warning_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.warning_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // V2X_INTEGRATION_MESSAGE_V2X_WARNING_H

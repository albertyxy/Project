// Generated by gencpp from file V2X_Integration/FB_05_Msg.msg
// DO NOT EDIT!


#ifndef V2X_INTEGRATION_MESSAGE_FB_05_MSG_H
#define V2X_INTEGRATION_MESSAGE_FB_05_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace V2X_Integration
{
template <class ContainerAllocator>
struct FB_05_Msg_
{
  typedef FB_05_Msg_<ContainerAllocator> Type;

  FB_05_Msg_()
    : header()
    , FB_Kopfrotation_Gier_Guete(0.0)
    , FB_Kopfposition_Z_Guete(0.0)
    , FB_Kopfposition_Y_Guete(0.0)
    , FB_Kopfposition_X_Guete(0.0)
    , FB_Kopfrotation_Gier(0.0)
    , FB_Kopfposition_Z(0.0)
    , FB_Kopfposition_Y(0.0)
    , FB_Kopfposition_X(0.0)  {
    }
  FB_05_Msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , FB_Kopfrotation_Gier_Guete(0.0)
    , FB_Kopfposition_Z_Guete(0.0)
    , FB_Kopfposition_Y_Guete(0.0)
    , FB_Kopfposition_X_Guete(0.0)
    , FB_Kopfrotation_Gier(0.0)
    , FB_Kopfposition_Z(0.0)
    , FB_Kopfposition_Y(0.0)
    , FB_Kopfposition_X(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _FB_Kopfrotation_Gier_Guete_type;
  _FB_Kopfrotation_Gier_Guete_type FB_Kopfrotation_Gier_Guete;

   typedef float _FB_Kopfposition_Z_Guete_type;
  _FB_Kopfposition_Z_Guete_type FB_Kopfposition_Z_Guete;

   typedef float _FB_Kopfposition_Y_Guete_type;
  _FB_Kopfposition_Y_Guete_type FB_Kopfposition_Y_Guete;

   typedef float _FB_Kopfposition_X_Guete_type;
  _FB_Kopfposition_X_Guete_type FB_Kopfposition_X_Guete;

   typedef float _FB_Kopfrotation_Gier_type;
  _FB_Kopfrotation_Gier_type FB_Kopfrotation_Gier;

   typedef float _FB_Kopfposition_Z_type;
  _FB_Kopfposition_Z_type FB_Kopfposition_Z;

   typedef float _FB_Kopfposition_Y_type;
  _FB_Kopfposition_Y_type FB_Kopfposition_Y;

   typedef float _FB_Kopfposition_X_type;
  _FB_Kopfposition_X_type FB_Kopfposition_X;





  typedef boost::shared_ptr< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> const> ConstPtr;

}; // struct FB_05_Msg_

typedef ::V2X_Integration::FB_05_Msg_<std::allocator<void> > FB_05_Msg;

typedef boost::shared_ptr< ::V2X_Integration::FB_05_Msg > FB_05_MsgPtr;
typedef boost::shared_ptr< ::V2X_Integration::FB_05_Msg const> FB_05_MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::V2X_Integration::FB_05_Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::V2X_Integration::FB_05_Msg_<ContainerAllocator1> & lhs, const ::V2X_Integration::FB_05_Msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.FB_Kopfrotation_Gier_Guete == rhs.FB_Kopfrotation_Gier_Guete &&
    lhs.FB_Kopfposition_Z_Guete == rhs.FB_Kopfposition_Z_Guete &&
    lhs.FB_Kopfposition_Y_Guete == rhs.FB_Kopfposition_Y_Guete &&
    lhs.FB_Kopfposition_X_Guete == rhs.FB_Kopfposition_X_Guete &&
    lhs.FB_Kopfrotation_Gier == rhs.FB_Kopfrotation_Gier &&
    lhs.FB_Kopfposition_Z == rhs.FB_Kopfposition_Z &&
    lhs.FB_Kopfposition_Y == rhs.FB_Kopfposition_Y &&
    lhs.FB_Kopfposition_X == rhs.FB_Kopfposition_X;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::V2X_Integration::FB_05_Msg_<ContainerAllocator1> & lhs, const ::V2X_Integration::FB_05_Msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace V2X_Integration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0505810bf77d4eb9eb73dfc0b88136b";
  }

  static const char* value(const ::V2X_Integration::FB_05_Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0505810bf77d4ebULL;
  static const uint64_t static_value2 = 0x9eb73dfc0b88136bULL;
};

template<class ContainerAllocator>
struct DataType< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "V2X_Integration/FB_05_Msg";
  }

  static const char* value(const ::V2X_Integration::FB_05_Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 FB_Kopfrotation_Gier_Guete\n"
"float32 FB_Kopfposition_Z_Guete\n"
"float32 FB_Kopfposition_Y_Guete\n"
"float32 FB_Kopfposition_X_Guete\n"
"float32 FB_Kopfrotation_Gier\n"
"float32 FB_Kopfposition_Z\n"
"float32 FB_Kopfposition_Y\n"
"float32 FB_Kopfposition_X\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::V2X_Integration::FB_05_Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.FB_Kopfrotation_Gier_Guete);
      stream.next(m.FB_Kopfposition_Z_Guete);
      stream.next(m.FB_Kopfposition_Y_Guete);
      stream.next(m.FB_Kopfposition_X_Guete);
      stream.next(m.FB_Kopfrotation_Gier);
      stream.next(m.FB_Kopfposition_Z);
      stream.next(m.FB_Kopfposition_Y);
      stream.next(m.FB_Kopfposition_X);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FB_05_Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::V2X_Integration::FB_05_Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::V2X_Integration::FB_05_Msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "FB_Kopfrotation_Gier_Guete: ";
    Printer<float>::stream(s, indent + "  ", v.FB_Kopfrotation_Gier_Guete);
    s << indent << "FB_Kopfposition_Z_Guete: ";
    Printer<float>::stream(s, indent + "  ", v.FB_Kopfposition_Z_Guete);
    s << indent << "FB_Kopfposition_Y_Guete: ";
    Printer<float>::stream(s, indent + "  ", v.FB_Kopfposition_Y_Guete);
    s << indent << "FB_Kopfposition_X_Guete: ";
    Printer<float>::stream(s, indent + "  ", v.FB_Kopfposition_X_Guete);
    s << indent << "FB_Kopfrotation_Gier: ";
    Printer<float>::stream(s, indent + "  ", v.FB_Kopfrotation_Gier);
    s << indent << "FB_Kopfposition_Z: ";
    Printer<float>::stream(s, indent + "  ", v.FB_Kopfposition_Z);
    s << indent << "FB_Kopfposition_Y: ";
    Printer<float>::stream(s, indent + "  ", v.FB_Kopfposition_Y);
    s << indent << "FB_Kopfposition_X: ";
    Printer<float>::stream(s, indent + "  ", v.FB_Kopfposition_X);
  }
};

} // namespace message_operations
} // namespace ros

#endif // V2X_INTEGRATION_MESSAGE_FB_05_MSG_H

// Generated by gencpp from file V2X_Integration/ESP_21_Msg.msg
// DO NOT EDIT!


#ifndef V2X_INTEGRATION_MESSAGE_ESP_21_MSG_H
#define V2X_INTEGRATION_MESSAGE_ESP_21_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace V2X_Integration
{
template <class ContainerAllocator>
struct ESP_21_Msg_
{
  typedef ESP_21_Msg_<ContainerAllocator> Type;

  ESP_21_Msg_()
    : header()
    , ESP_21_CRC(0)
    , ESP_21_BZ(0)
    , BR_Eingriffsmoment(0)
    , ESP_Diagnose(0)
    , ESC_v_Signal_Qualifier_High_Low(0)
    , ESP_Vorsteuerung(0)
    , OBD_Schlechtweg(0)
    , OBD_QBit_Schlechtweg(0)
    , ESP_v_Signal(0.0)
    , ASR_Tastung_passiv(0)
    , ESP_Tastung_passiv(0)
    , ESP_Systemstatus(0)
    , ASR_Schalteingriff(0)
    , ESP_QBit_v_Signal(0)
    , ABS_Bremsung(0)
    , ASR_Anf(0)
    , MSR_Anf(0)
    , EBV_Eingriff(0)
    , EDS_Eingriff(0)
    , ESP_Eingriff(0)
    , ESP_ASP(0)
    , ESC_Neutralschaltung(0)  {
    }
  ESP_21_Msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ESP_21_CRC(0)
    , ESP_21_BZ(0)
    , BR_Eingriffsmoment(0)
    , ESP_Diagnose(0)
    , ESC_v_Signal_Qualifier_High_Low(0)
    , ESP_Vorsteuerung(0)
    , OBD_Schlechtweg(0)
    , OBD_QBit_Schlechtweg(0)
    , ESP_v_Signal(0.0)
    , ASR_Tastung_passiv(0)
    , ESP_Tastung_passiv(0)
    , ESP_Systemstatus(0)
    , ASR_Schalteingriff(0)
    , ESP_QBit_v_Signal(0)
    , ABS_Bremsung(0)
    , ASR_Anf(0)
    , MSR_Anf(0)
    , EBV_Eingriff(0)
    , EDS_Eingriff(0)
    , ESP_Eingriff(0)
    , ESP_ASP(0)
    , ESC_Neutralschaltung(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _ESP_21_CRC_type;
  _ESP_21_CRC_type ESP_21_CRC;

   typedef uint8_t _ESP_21_BZ_type;
  _ESP_21_BZ_type ESP_21_BZ;

   typedef int16_t _BR_Eingriffsmoment_type;
  _BR_Eingriffsmoment_type BR_Eingriffsmoment;

   typedef uint8_t _ESP_Diagnose_type;
  _ESP_Diagnose_type ESP_Diagnose;

   typedef uint8_t _ESC_v_Signal_Qualifier_High_Low_type;
  _ESC_v_Signal_Qualifier_High_Low_type ESC_v_Signal_Qualifier_High_Low;

   typedef uint8_t _ESP_Vorsteuerung_type;
  _ESP_Vorsteuerung_type ESP_Vorsteuerung;

   typedef uint8_t _OBD_Schlechtweg_type;
  _OBD_Schlechtweg_type OBD_Schlechtweg;

   typedef uint8_t _OBD_QBit_Schlechtweg_type;
  _OBD_QBit_Schlechtweg_type OBD_QBit_Schlechtweg;

   typedef float _ESP_v_Signal_type;
  _ESP_v_Signal_type ESP_v_Signal;

   typedef uint8_t _ASR_Tastung_passiv_type;
  _ASR_Tastung_passiv_type ASR_Tastung_passiv;

   typedef uint8_t _ESP_Tastung_passiv_type;
  _ESP_Tastung_passiv_type ESP_Tastung_passiv;

   typedef uint8_t _ESP_Systemstatus_type;
  _ESP_Systemstatus_type ESP_Systemstatus;

   typedef uint8_t _ASR_Schalteingriff_type;
  _ASR_Schalteingriff_type ASR_Schalteingriff;

   typedef uint8_t _ESP_QBit_v_Signal_type;
  _ESP_QBit_v_Signal_type ESP_QBit_v_Signal;

   typedef uint8_t _ABS_Bremsung_type;
  _ABS_Bremsung_type ABS_Bremsung;

   typedef uint8_t _ASR_Anf_type;
  _ASR_Anf_type ASR_Anf;

   typedef uint8_t _MSR_Anf_type;
  _MSR_Anf_type MSR_Anf;

   typedef uint8_t _EBV_Eingriff_type;
  _EBV_Eingriff_type EBV_Eingriff;

   typedef uint8_t _EDS_Eingriff_type;
  _EDS_Eingriff_type EDS_Eingriff;

   typedef uint8_t _ESP_Eingriff_type;
  _ESP_Eingriff_type ESP_Eingriff;

   typedef uint8_t _ESP_ASP_type;
  _ESP_ASP_type ESP_ASP;

   typedef uint8_t _ESC_Neutralschaltung_type;
  _ESC_Neutralschaltung_type ESC_Neutralschaltung;





  typedef boost::shared_ptr< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> const> ConstPtr;

}; // struct ESP_21_Msg_

typedef ::V2X_Integration::ESP_21_Msg_<std::allocator<void> > ESP_21_Msg;

typedef boost::shared_ptr< ::V2X_Integration::ESP_21_Msg > ESP_21_MsgPtr;
typedef boost::shared_ptr< ::V2X_Integration::ESP_21_Msg const> ESP_21_MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::V2X_Integration::ESP_21_Msg_<ContainerAllocator1> & lhs, const ::V2X_Integration::ESP_21_Msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ESP_21_CRC == rhs.ESP_21_CRC &&
    lhs.ESP_21_BZ == rhs.ESP_21_BZ &&
    lhs.BR_Eingriffsmoment == rhs.BR_Eingriffsmoment &&
    lhs.ESP_Diagnose == rhs.ESP_Diagnose &&
    lhs.ESC_v_Signal_Qualifier_High_Low == rhs.ESC_v_Signal_Qualifier_High_Low &&
    lhs.ESP_Vorsteuerung == rhs.ESP_Vorsteuerung &&
    lhs.OBD_Schlechtweg == rhs.OBD_Schlechtweg &&
    lhs.OBD_QBit_Schlechtweg == rhs.OBD_QBit_Schlechtweg &&
    lhs.ESP_v_Signal == rhs.ESP_v_Signal &&
    lhs.ASR_Tastung_passiv == rhs.ASR_Tastung_passiv &&
    lhs.ESP_Tastung_passiv == rhs.ESP_Tastung_passiv &&
    lhs.ESP_Systemstatus == rhs.ESP_Systemstatus &&
    lhs.ASR_Schalteingriff == rhs.ASR_Schalteingriff &&
    lhs.ESP_QBit_v_Signal == rhs.ESP_QBit_v_Signal &&
    lhs.ABS_Bremsung == rhs.ABS_Bremsung &&
    lhs.ASR_Anf == rhs.ASR_Anf &&
    lhs.MSR_Anf == rhs.MSR_Anf &&
    lhs.EBV_Eingriff == rhs.EBV_Eingriff &&
    lhs.EDS_Eingriff == rhs.EDS_Eingriff &&
    lhs.ESP_Eingriff == rhs.ESP_Eingriff &&
    lhs.ESP_ASP == rhs.ESP_ASP &&
    lhs.ESC_Neutralschaltung == rhs.ESC_Neutralschaltung;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::V2X_Integration::ESP_21_Msg_<ContainerAllocator1> & lhs, const ::V2X_Integration::ESP_21_Msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace V2X_Integration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14034e15be32d792bb36bad51c5aaa1b";
  }

  static const char* value(const ::V2X_Integration::ESP_21_Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14034e15be32d792ULL;
  static const uint64_t static_value2 = 0xbb36bad51c5aaa1bULL;
};

template<class ContainerAllocator>
struct DataType< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "V2X_Integration/ESP_21_Msg";
  }

  static const char* value(const ::V2X_Integration::ESP_21_Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint16 ESP_21_CRC\n"
"uint8 ESP_21_BZ\n"
"int16 BR_Eingriffsmoment\n"
"uint8 ESP_Diagnose\n"
"uint8 ESC_v_Signal_Qualifier_High_Low\n"
"uint8 ESP_Vorsteuerung\n"
"uint8 OBD_Schlechtweg\n"
"uint8 OBD_QBit_Schlechtweg\n"
"float32 ESP_v_Signal\n"
"uint8 ASR_Tastung_passiv\n"
"uint8 ESP_Tastung_passiv\n"
"uint8 ESP_Systemstatus\n"
"uint8 ASR_Schalteingriff\n"
"uint8 ESP_QBit_v_Signal\n"
"uint8 ABS_Bremsung\n"
"uint8 ASR_Anf\n"
"uint8 MSR_Anf\n"
"uint8 EBV_Eingriff\n"
"uint8 EDS_Eingriff\n"
"uint8 ESP_Eingriff\n"
"uint8 ESP_ASP\n"
"uint8 ESC_Neutralschaltung\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::V2X_Integration::ESP_21_Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ESP_21_CRC);
      stream.next(m.ESP_21_BZ);
      stream.next(m.BR_Eingriffsmoment);
      stream.next(m.ESP_Diagnose);
      stream.next(m.ESC_v_Signal_Qualifier_High_Low);
      stream.next(m.ESP_Vorsteuerung);
      stream.next(m.OBD_Schlechtweg);
      stream.next(m.OBD_QBit_Schlechtweg);
      stream.next(m.ESP_v_Signal);
      stream.next(m.ASR_Tastung_passiv);
      stream.next(m.ESP_Tastung_passiv);
      stream.next(m.ESP_Systemstatus);
      stream.next(m.ASR_Schalteingriff);
      stream.next(m.ESP_QBit_v_Signal);
      stream.next(m.ABS_Bremsung);
      stream.next(m.ASR_Anf);
      stream.next(m.MSR_Anf);
      stream.next(m.EBV_Eingriff);
      stream.next(m.EDS_Eingriff);
      stream.next(m.ESP_Eingriff);
      stream.next(m.ESP_ASP);
      stream.next(m.ESC_Neutralschaltung);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ESP_21_Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::V2X_Integration::ESP_21_Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::V2X_Integration::ESP_21_Msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ESP_21_CRC: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ESP_21_CRC);
    s << indent << "ESP_21_BZ: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESP_21_BZ);
    s << indent << "BR_Eingriffsmoment: ";
    Printer<int16_t>::stream(s, indent + "  ", v.BR_Eingriffsmoment);
    s << indent << "ESP_Diagnose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESP_Diagnose);
    s << indent << "ESC_v_Signal_Qualifier_High_Low: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESC_v_Signal_Qualifier_High_Low);
    s << indent << "ESP_Vorsteuerung: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESP_Vorsteuerung);
    s << indent << "OBD_Schlechtweg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.OBD_Schlechtweg);
    s << indent << "OBD_QBit_Schlechtweg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.OBD_QBit_Schlechtweg);
    s << indent << "ESP_v_Signal: ";
    Printer<float>::stream(s, indent + "  ", v.ESP_v_Signal);
    s << indent << "ASR_Tastung_passiv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ASR_Tastung_passiv);
    s << indent << "ESP_Tastung_passiv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESP_Tastung_passiv);
    s << indent << "ESP_Systemstatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESP_Systemstatus);
    s << indent << "ASR_Schalteingriff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ASR_Schalteingriff);
    s << indent << "ESP_QBit_v_Signal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESP_QBit_v_Signal);
    s << indent << "ABS_Bremsung: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ABS_Bremsung);
    s << indent << "ASR_Anf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ASR_Anf);
    s << indent << "MSR_Anf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MSR_Anf);
    s << indent << "EBV_Eingriff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EBV_Eingriff);
    s << indent << "EDS_Eingriff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EDS_Eingriff);
    s << indent << "ESP_Eingriff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESP_Eingriff);
    s << indent << "ESP_ASP: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESP_ASP);
    s << indent << "ESC_Neutralschaltung: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESC_Neutralschaltung);
  }
};

} // namespace message_operations
} // namespace ros

#endif // V2X_INTEGRATION_MESSAGE_ESP_21_MSG_H
